import React, { useEffect, useState } from 'react'
import { useRouter } from 'next/router';
import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import PageTitle from '@/components/PageTitle';
import Link from 'next/link';
import BoxComponent from '@/components/BoxComponent';
import { BoxComponentType, ProductType } from '@/types/types';



interface Props {
  product: ProductType;
  allproducts: ProductType[];
  boxItemsData: BoxComponentType[];
  // randomProducts: ProductType[];
}

const BrandDetailPage: NextPage<Props> = ({ product, allproducts, boxItemsData }) => {


  const router = useRouter();
  const [expandedBox, setExpandedBox] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [products, setProducts] = useState<ProductType[]>([]);
  
  const totalPages = Math.ceil(allproducts.length / 10);
  // const { id } = router.query;

// if (router.isFallback) {
// return <div>Loading...</div>;
// }


    useEffect(() => {
        const indexOfLastProduct = currentPage * 10;
        const indexOfFirstProduct = indexOfLastProduct - 10;
        const currentProducts = allproducts.slice(indexOfFirstProduct, indexOfLastProduct);

        setProducts(currentProducts);
    }, [currentPage]);

    const handleArrowClick = (direction: string, clickedPage: any) => {
        if (direction === 'previous') {
            setCurrentPage(currentPage - 1);
        } else {
            setCurrentPage(currentPage + 1);
        }
        handleClick(clickedPage);
    };

    const handleClick = (pageNumber: number) => {
     if (pageNumber === currentPage) {
        return;
        }
        setCurrentPage(pageNumber);
    };
      
const handleBoxClick = (box: any) => {
    setExpandedBox(box === expandedBox ? null : box);
};


return (
    <>
      <Head>
        <title>{product.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title={product.title} />

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-12 h-100">
              {allproducts?.map((item) => {
                if (product.id === item.id) {
                  return (
                      < div key={item.id}>
                      <img src={item.img} alt="IMG-PRODUCT" />
                      </div>
                      )
                    }
              })}
            </div>
            <div className="col-12">
                <h4 className="text-center">{product.title}</h4>
                <span className="text-center">{product.price}</span>
                <p className="text-left">{product.description}</p>
          </div>
            <div className="col-12">
              <img src="../../pictures/about-banner1.png" alt="probna slikicka" />
              {product.id}
              </div>

          {/* Box Component Item  */}
          {boxItemsData.map((boxItem, index) => {
            return (
              <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
            )
          })}


          {/* <RelatedProducts products={randomProducts}/> */}


          {/* pagination  */}
          <div className="text-center mb-5" style={{letterSpacing: "3px"}}>
            {[...Array(totalPages)].map((_, i) => {
              
              const pageNumber = i + 1;
              const isActive = (pageNumber === currentPage) ? "text-danger" : "text-dark";
            return (
                <>
                    {i === 0 ? (
                        <>
                        <button className="bg-transparent border-0 font-weight-bold" >
                        <Link href={`/products?page=${currentPage -1}`} onClick={() => handleArrowClick('previous', currentPage)}>
                            {"<"}
                        </Link>
                        </button>
                        <button className={`bg-transparent border-0 font-weight-bold ${isActive}`} onClick={() => handleClick(pageNumber)}>{pageNumber}</button>
                        </>
                    ) : (
                        <button className={`bg-transparent border-0 font-weight-bold ${isActive}`} onClick={() => handleClick(pageNumber)}>{pageNumber} </button>
                    )}
                    
                    {i === totalPages - 1 ? (
                        <Link href={`/products?page=${currentPage + 1}`} onClick={() => handleClick(currentPage + 1)}>
                            {">"}
                        </Link>
                    ) : null}
                </>
                );
            })}
        </div>
        </div>
      </div>
    </>
  );
};


export default BrandDetailPage;



export const getStaticPaths: GetStaticPaths = async () => {

  const resClothes = await fetch('http://localhost:5001/vintageClothes');
  const vintageClothes: SubcategoryType[] = await resClothes.json();
  // const res = await fetch("http://localhost:5001/vintageClothes");
  // const data: DataType = await res.json();


  // OPTION 1 :
  const allproducts = vintageClothes?.flatMap((category) => {
    return Object.values(category).flatMap((productList: ProductType[]) => productList);
  });

  const paths = allproducts?.map((product: ProductType) => ({
    params: {
      id: String(product.id),
    },
  }));

  return {
    paths,
    fallback: false,
  };
};


// OPTION 2 :
//   let allproducts: ProductType[] = []


//   const pathsArray = vintageClothes.forEach((category: SubcategoryType) => {
//         Object.values(category).forEach((productList: ProductType[]) => {
//             productList.forEach((product: ProductType) => {
//                 allproducts?.push(product);
            
//             });
//         });
//     });

//   const paths = allproducts.map((item) => {
//           return (
//                 {id: item.id.toString()}
//               )
//             }
//       )

//   return {
//     paths,
//     fallback: false,
//   };
// }


export const getStaticProps: GetStaticProps = async ({ params }) => {

  let product: ProductType | undefined = undefined;

  const resBoxItems = await fetch('http://localhost:5001/boxComponents');
  const boxItemsData = await resBoxItems.json();


  const resProductsCount = await fetch("http://localhost:5001/vintageClothes");
  const vintageClothes: SubcategoryType[] = await resProductsCount.json();

  
  let allproducts: ProductType[] = []

    vintageClothes.forEach((category: SubcategoryType) => {
        Object.values(category).forEach((productList: ProductType[]) => {
            productList.forEach((product: ProductType) => {
            if (allproducts.length <= 10 && product.id) {
                allproducts?.push(product);
            } else {
                return;
            }
            });
        });
    });

  console.log(params?.id)
  
  if (params?.id) {
    const resProduct = await fetch(`http://localhost:5001/vintageClothes/${params.id}`);
    product = await resProduct.json();
  }
  
  // console.log(product)


  // let randomProducts: ProductType[] = [];

  // if (allproducts.length > 4) {
  //   const randomNo = Math.floor(Math.random() * (allproducts.length - 4));
  //   const resRandomProducts = await fetch(`http://localhost:5001/products?_start=${randomNo}&_limit=4`);
  //   randomProducts = await resRandomProducts.json();
  // }


  return {
    props: {
      product,
      allproducts,
      boxItemsData,
      // randomProducts
    },
  };
};