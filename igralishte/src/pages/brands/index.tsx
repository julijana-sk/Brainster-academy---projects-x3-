import React, { useState } from 'react'
import Head from 'next/head';
import { ProductType, SubcategoryType } from '@/types/types';
import { GetServerSideProps, NextPage } from 'next';
import { useRouter } from 'next/router';
import BrandItem from '@/components/Brands';
import ProductItem from '@/components/ProductItem';

interface Props {
  vintageClothes: SubcategoryType[];
  accessories: SubcategoryType[];
  products: ProductType[];
  allproducts: ProductType[];
  searchedBrandsData: ProductType[];
}

const ProductPage: NextPage<Props> = ({vintageClothes, accessories, products, allproducts, searchedBrandsData }) => {
    
    const router = useRouter();
    const [page, setPage] = useState(1);
    const totalPages = Math.ceil(allproducts.length / 10);

    const handleNextPage = () => {
        setPage(page + 1);
    };

    const handlePreviousPage = () => {
        setPage(page - 1);
    };

return (
    < >
        <Head>
            <title>Igralishte - Brand</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="container">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-11 mr-auto ml-auto">
              <button
                className="btn btn-large btn-danger"
                data-filter="*"
                onClick={() => {
                router.replace({
                  pathname: "/brands",
                });
              }}>
                All Brands
              </button>

              {/* <button
                className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                data-filter=".women"
                onClick={() => {
                    router.push({
                      pathname: "/shop",
                      query: {
                        ...router.query,
                        gender: "women",
                      },
                    });
                  }}
              >
                Women
              </button>

              <button className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" data-filter=".men"
              onClick={() => {
                    router.push({
                      pathname: "/shop",
                      query: {
                        ...router.query,
                        gender: "man",
                      },
                    });
                  }}>
                Men
              </button>

              <button 
                className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" 
                data-filter=".bag" 
                onClick={() => {
                    router.push({
                      pathname: "/shop",
                      query: {
                        ...router.query,
                        query: "Belt"
                      }
                    });
                  }} >
                Belt
              </button>

              <button
                className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                data-filter=".shoes"
                onClick={() => {
                    router.push({
                      pathname: "/shop",
                      query: {
                        ...router.query,
                        query: "converse"
                      }
                    });
                  }} >
                Shoes
              </button>

              <button
                className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                data-filter=".watches"
                onClick={() => {
                    router.push({
                      pathname: "/shop",
                      query: {
                        ...router.query,
                        query: "watch"
                      }
                    });
                  }} >
                Watches
              </button> */}
            </div>
        <div className='col-11 mr-auto ml-auto my-5'>
            {searchedBrandsData.length > 0 ? ( searchedBrandsData.map((brand) => {


            // treba da go prikazuva SAMO brendot kojsto odgovara na linkot !! ?? sporedi spored URL ?
            //   http://localhost:3000/brands?brand=nezno

            // {searchedBrandsData.length > 0 ? ( searchedBrandsData.find((brand) => {
                // if (router.query.id === brand.id) {
                return (
                    <div>
                        <BrandItem  brand={brand} />
                        <p className='about-text text-left mb-5'>{`Погледнете ги производите на ${brand.name} кои ги нудиме во Игралиште. Имаме доста голем избор на Pussy привезоци кои се кул и ултра феминистички, а.к.а. grl pwr.`}</p>
                        <div>
                            <h2 className='mb-4'>Парчиња од брендот:</h2>
                            {/* <ProductItem /> */}
                        </div>
                    </div>
                    ) 
            //  }
            })
            ) : (
                <p>There are no results...</p>
              )
            }
          </div>


        {/* pagination */}
           <div className="d-flex flex-row justify-content-center">
            <div className="col-11 bg-primary mr-auto ml-auto">
                <button onClick={handlePreviousPage} disabled={page === 1}>
                    Previous
                </button>
                <span>Page {page} of {totalPages}</span>
                <button onClick={handleNextPage} disabled={page === totalPages}>
                    Next
                </button>
          </div>
        </div>
      </div>
    </div>
    </>
  ); 
};

export default ProductPage;


export const getServerSideProps: GetServerSideProps = async ({query}) => {
    
const page = parseInt(query.page as string, 10) || 1;

const resClothes = await fetch(`http://localhost:5001/vintageClothes?page=${page}`);
const vintageClothes: SubcategoryType[] = await resClothes.json();

const resAccessories = await fetch(`http://localhost:5001/accessories?page=${page}`);
const accessories: SubcategoryType[] = await resAccessories.json();


const response = await fetch(`http://localhost:5001?page=${page}`);
const products: ProductType[] = await response.json();

let resSearchedBrands: Response;

  if (query.brand && query.query) {
    resSearchedBrands = await fetch(
      `http://localhost:5001/brands?gender_like=${query.brand}&q=${query.query}`
    );
  } else if (query.brand) {
    resSearchedBrands = await fetch(
      `http://localhost:5001/brands?gender_like=${query.brand}`
    );
  } else if (query.query) {
    resSearchedBrands = await fetch(
      `http://localhost:5001/brands?q=${query.query}`
    );
  }  else {
    resSearchedBrands = await fetch("http://localhost:5001/brands");
  }

  const searchedBrandsData: ProductType[] = await resSearchedBrands.json();



let allproducts: ProductType[] = []


    vintageClothes.forEach((category: SubcategoryType) => {
        Object.values(category).forEach((productList: ProductType[]) => {
            productList.forEach((product: ProductType) => {
            if (allproducts.length <= 10 && product.id) {
                allproducts?.push(product);
            } else {
                return;
            }
            });
        });
    });

    accessories.forEach((accessory: SubcategoryType) => {
        Object.values(accessory).forEach((product: ProductType) => {
            if (allproducts.length <= 10 && product.id) {
            allproducts?.push(product);
            } else {
            return;
            }
        });
    });
    

  return {
      props: {
        products,
        allproducts,
        vintageClothes,
        accessories,
        searchedBrandsData,
        page
      },
    }
}
