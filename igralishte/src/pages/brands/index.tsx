import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { BrandType, DataType, ProductType } from '@/types/types';
import { GetServerSideProps, NextPage } from 'next';
import { useRouter } from 'next/router';
import BrandItem from '@/components/Brands';
import ProductItem from '@/components/ProductItem';
import Link from 'next/link';

// interface Props {
//   brands: BrandType[];
//   searchedBrands: BrandType[];
//   products: DataType["products"]
// }

// const ProductPage: NextPage<Props> = ({searchedBrands, products }) => {
    
//   const router = useRouter();
//   const [currentPage, setCurrentPage] = useState(1);
//   const [brands, setBrands] = useState<BrandType[]>([]);
//   const [currentIndex, setCurrentIndex] = useState(0);
//   const [brandedProducts, setBrandedProducts] = useState<BrandType[]>(searchedBrands.slice(0, 6));
//   const totalPages = Math.ceil(brands.length / 10);


//     useEffect(() => {
//         const indexOfLastProduct = currentPage * 10;
//         const indexOfFirstProduct = indexOfLastProduct - 10;
//         const currentProducts = brands.slice(indexOfFirstProduct, indexOfLastProduct);

//         setBrands(currentProducts);
//     }, [currentPage]);


//     const allProducts: ProductType[] = [];

//         Object.values(products.vintageClothes).forEach((productList: ProductType[]) => {
//             productList.forEach((product: ProductType) => {
//                 allProducts.push(product);
//             });
//         });

//         Object.values(products.accessories).forEach((productList: ProductType[]) => {
//             productList.forEach((product: ProductType) => {
//                 allProducts.push(product);
//             });
//         });


//     const handleArrowClick = (direction: string, clickedPage: any) => {
//         if (direction === 'previous') {
//             setCurrentPage(currentPage - 1);
//         } else {
//             setCurrentPage(currentPage + 1);
//         }
//         handleClick(clickedPage);
//     };

//     const handleClick = (pageNumber: number) => {
//      if (pageNumber === currentPage) {
//         return;
//         }
//         setCurrentPage(pageNumber);
//     };

    
    
      
//   const handlePrevClick = () => {
//     if (currentIndex > 0) {
//       setCurrentIndex(currentIndex - 6);
//       setBrandedProducts(searchedBrands.slice(currentIndex - 6, currentIndex));
//     }
//   };

//   const handleNextClick = () => {
//     if (currentIndex + 6 < searchedBrands.length) {
//       setCurrentIndex(currentIndex + 6);
//       setBrandedProducts(searchedBrands.slice(currentIndex + 6, currentIndex + 12));
//     }
//   };
  


// return (
//     < >
//         <Head>
//             <title>Igralishte - Brand</title>
//             <meta name="description" content="Generated by create next app" />
//             <link rel="icon" href="/favicon.ico" />
//         </Head>
//         <div className="container">
//           <div className="row d-flex flex-column justify-content-center">
//             <div className='col-11 mr-auto ml-auto my-5'>
//             {searchedBrands.length > 0 ? ( searchedBrands.map((brand) => {
//               const filterProducts = allProducts?.filter(product => product.brand === brand.name)
//               return (
//                 <div>
//                     <BrandItem  brand={brand} />
//                     <p className='about-text text-left mb-5'>{`Погледнете ги производите на ${brand.name} кои ги нудиме во Игралиште. Имаме доста голем избор на Pussy привезоци кои се кул и ултра феминистички, а.к.а. grl pwr.`}</p>
                    
//                     <div className="container-fluid">
//                       <div className="row flex-column">
//                         <h3 className="text-center my-4">Парчиња од брендот:</h3>
//                       <div className="row flex-row">
//                       {filterProducts?.map((product) => {
//                           return (
//                               <div className="col-5 p-0 mb-3 mr-2 product-img-small">
//                                 <ProductItem key={product.id} {...product}/>
//                               </div>
//                               )
//                             })} 
//                         {filterProducts?.length >= 6 && (
//                           <div>
//                             <button onClick={handlePrevClick}>{'<'}</button>
//                             <button onClick={handleNextClick}>{'>'}</button>
//                           </div>
//                         )}
//                     </div>
//                   </div>
//                 </div>
//                 </div>
//               )
//               })) : (
//               <p>There are no results...</p>
//             )}
                
//             {/* pagination  */}
//           <div className="text-center mb-5" style={{letterSpacing: "3px"}}>
//             {[...Array(totalPages)].map((_, i) => {
              
//               const pageNumber = i + 1;
//               const isActive = (pageNumber === currentPage) ? "text-danger" : "text-dark";
//             return (
//                 <>
//                     {i === 0 ? (
//                         <>
//                         <button className="bg-transparent border-0 font-weight-bold" >
//                         <Link href={`/brands?page=${currentPage -1}`} onClick={() => handleArrowClick('previous', currentPage)}>
//                             {"<"}
//                         </Link>
//                         </button>
//                         <button className={`bg-transparent border-0 font-weight-bold ${isActive}`} onClick={() => handleClick(pageNumber)}>{pageNumber}</button>
//                         </>
//                     ) : (
//                         <button className={`bg-transparent border-0 font-weight-bold ${isActive}`} onClick={() => handleClick(pageNumber)}>{pageNumber} </button>
//                     )}
                    
//                     {i === totalPages - 1 ? (
//                         <Link href={`/brands?page=${currentPage + 1}`} onClick={() => handleClick(currentPage + 1)}>
//                             {">"}
//                         </Link>
//                     ) : null}
//                 </>
//                 );
//             })}
//         </div>
//         </div>
//       </div>
//     </div>
//     </>
//   ); 
// };

// export default ProductPage;


//  export const getServerSideProps: GetServerSideProps = async ({query}) => { 
     
//     const page = parseInt(query.page as string, 10) || 1;
          
//     const responseBrands = await fetch(`http://localhost:5001/brands?&page=${page}`); 
//     const brands: BrandType[] = await responseBrands.json();

//     const responseProducts = await fetch(`http://localhost:5001/products?&page=${page}`); 
//     const products: DataType["products"] = await responseProducts.json();

         
//   let resSearchedBrands: Response;

//     if (query.brand && query.query) {
//       resSearchedBrands = await fetch(
//         `http://localhost:5001/brands?category_like=${query.brand}&q=${query.query}`
//       );
//     } else if (query.brand) {
//       resSearchedBrands = await fetch(
//         `http://localhost:5001/brands?category_like=${query.brand}`
//       );
//     } else if (query.query) {
//       resSearchedBrands = await fetch(
//         `http://localhost:5001/brands?q=${query.query}`
//       );
//     }  else {
//       resSearchedBrands = await fetch("http://localhost:5001/brands");
//     }

//     const searchedBrands: BrandType[] = await resSearchedBrands.json();

// return { 
//     props: { 
//         brands,
//         searchedBrands,
//         products,
//     },
//     }
//  }
