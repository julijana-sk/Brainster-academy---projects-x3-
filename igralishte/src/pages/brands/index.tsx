import React, { useState } from 'react'
import Head from 'next/head';
import { BrandType, ProductType } from '@/types/types';
import { GetServerSideProps, NextPage } from 'next';
import { useRouter } from 'next/router';
import Link from 'next/link';

interface Props {
  brands: BrandType[];
  products: ProductType[];
}

const ProductPage: NextPage<Props> = ({ brands, products }) => {

  const breadcrumbs = [
        { name: 'Почетна', url: '/' },
        { name: 'Сите', url: '/brands' },
        ];
    
  const router = useRouter();

  const filterProducts = products?.filter(product => product.category === "brands")
  const [currentPage, setCurrentPage] = useState<number>(1);


    const totalPages = Math.ceil(brands.length / 10);

    const start = (currentPage - 1) * 10;
    const end = start + 10;
    const paginationProductsForDisplaying = brands.slice(start, end);

    const handlePageChange = (page: number) => {
        if (page < 1 || page > totalPages) return;
        setCurrentPage(page);
    };

    const renderPages = () => {
        return Array.from({ length: totalPages }, (_, index) => (
              <a
                key={index}
                className={`flex-c-m how-pagination1 trans-04 m-all-7 pointer font-weight-bold ${
                  currentPage === index + 1
                    ? "active-pagination1 text-danger"
                    : ""
                }`}
                onClick={() => handlePageChange(index + 1)}>
                {index + 1}
              </a>
        ));
    };   


return (
    < >
        <Head>
            <title>Igralishte-Brand</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="container">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-12 flex-row flex-wrap justify-content-around">
                {filterProducts?.map((product, productIndex) => {
                    let columnSize = "col-5 product-img-small";
                    let columnText = "product-text-a"
                    for (let i = 2; i < brands.length; i += 5) {
                    if (productIndex === i ) {columnSize = "col-11"; columnText = "product-text"}}
                    
                    return (
                        <Link href={`/brands/${product.id}`} key={productIndex} className={`${columnSize} ${columnText} p-0 mb-2`}>
                            <div className="product-wrapper mb-3 p-0">
                                <img src={product.img} alt="IMG-PRODUCT" className="product-img"/>
                                <p>{product.title}</p>
                                <p style={{fontWeight: '500'}}>{product.price} ден.</p>
                            </div>
                        </Link>
                        )
                        }
                    )}
                </div>
              </div>
            </div>
       
         {/* pagination  */}
          <div className="flex-l-m flex-w w-full p-t-10 m-lr--7" style={{ letterSpacing: "5px" }}>
                <button onClick={() => handlePageChange(currentPage - 1)} className='bg-transparent border-0 mr-1'>
                    {"<"}
                </button>
                {renderPages()}
                <button onClick={() => handlePageChange(currentPage + 1)} className='bg-transparent border-0 ml-1'>
                    {">"}
                </button>
            </div>
    </>
  ); 
};

export default ProductPage;


 export const getServerSideProps: GetServerSideProps = async ({query}) => { 
     
     const page = parseInt(query.page as string, 10) || 1;
     
    const responseBrands = await fetch(`http://localhost:5001/brands?&page=${page}`); 
    const brands: BrandType[] = await responseBrands.json();

    const responseProducts = await fetch(`http://localhost:5001/products?&page=${page}`); 
    const products: ProductType[] = await responseProducts.json();

//  let searchQuery = query.query || "";

//  if (searchQuery) {
//     [resSearchedBlogsItems, resSearchedProductsItems] = await Promise.all([
//       fetch(`http://localhost:5001/blogs?q=${query.query}`),
//       fetch(`http://localhost:5001/products?q=${query.query}`),
//     ]);
//  } else {
//     [resSearchedBlogsItems, resSearchedProductsItems] = await Promise.all([
//       fetch("http://localhost:5001/blogs"),
//       fetch("http://localhost:5001/products"),
//     ]);
//  }

//  const [searchedBlogsItemsData, searchedProductsItemsData ] = await Promise.all([
//     resSearchedBlogsItems.json(),
//     resSearchedProductsItems.json(),
//   ]);
   

 return {
    props: {
            brands,
            products,
        },
    }

 }
