import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetStaticProps, NextPage } from 'next';
import PageTitle from '@/components/PageTitle';
import RelatedProducts from '@/components/RelatedProducts';
import { DataType, ProductType } from '@/types/types';
import ProductItem from '@/components/ProductItem';


interface Props {
  product: ProductType;
  allProducts: ProductType[];
  randomProducts: ProductType[];
}

const FavoritesPage: NextPage<Props> = ({ product, allProducts, randomProducts }) => {


  const [favorites, setFavorites] = useState<ProductType[]>(JSON.parse(localStorage.getItem('favorites') || '[]'));


  
useEffect(() => {
    const updatedFavoriteProducts = allProducts.filter((prod) => favorites.includes(prod));
    setFavorites(updatedFavoriteProducts);
}, [favorites]);


  
  const router = useRouter();
  
  const [page, setPage] = useState(1);



  return (
    <>
      <Head>
        <title>Igralishte - Product Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-11 mb-5">
                {/* renderiraj gi stavenite vo card to shop produkti */}
                {favorites.map((product: ProductType) => (
                <ProductItem key={product.id} {...product}  />
                ))}
            </div>

           {/* Other Related Product Items  */}
              <RelatedProducts products={randomProducts}/>

      </div>
    </div>
  </>
  );
};


export default FavoritesPage;




export const getStaticProps: GetStaticProps = async ({ params }) => {

  let product: ProductType | undefined = undefined;
  
  const response = await fetch('http://localhost:5001/products'); 
  const products: DataType["products"] = await response.json();

  const allProducts: ProductType[] = [];

      Object.values(products.vintageClothes).forEach((productList: ProductType[]) => {
          productList.forEach((product: ProductType) => {
              allProducts.push(product);
          });
      });
  
 
const getRandomProducts = (products: ProductType[], quantity: number): ProductType[] => {
   const randomProducts: ProductType[] = [];

   for (let i = 0; i < quantity; i++) {
     const randomIndex = Math.floor(Math.random() * products.length);
     randomProducts.push(products[randomIndex]);

     products.splice(randomIndex, 1);
   }
   return randomProducts;
}

const randomProducts: ProductType[] = getRandomProducts(allProducts, 6);



  if (params?.id) {
    const resProduct = await fetch(`http://localhost:5001/products/${params.id}`);
    product = await resProduct.json();

   if (productFound => productFound.id === params.id) { 
    return  productFound;; 
  }
  }

if (!product) { throw new Error("Product not found"); }
console.log(params?.id)

return {
    props: {
      product,
      allProducts,
      randomProducts,
      revalidate: 60 * 60 * 24
    },
  };
};