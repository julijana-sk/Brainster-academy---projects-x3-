import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import BoxComponent from '@/components/BoxComponent';
import PageTitle from '@/components/PageTitle';
import RelatedProducts from '@/components/RelatedProducts';
import { BoxComponentType, DataType, ProductType } from '@/types/types';
import AmountOfProduct from '@/components/AmountOfProduct';
import PrimaryBtn from '@/components/PrimaryBtn';
import Link from 'next/link';


interface Props {
  product: ProductType;
  // products: DataType["products"];
  allProducts: ProductType[];
  randomProducts: ProductType[];
  boxItemsData: BoxComponentType[];
}

const OrderPage: NextPage<Props> = ({ product, allProducts, boxItemsData, randomProducts }) => {


  // const { useFetchAllProducts, addToCard} = useContext(UserContext);
  
  
  const router = useRouter();
  const [products, setProducts] = useState<ProductType[]>([]);

  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(allProducts.length / 10);
  
  const [expandedBox, setExpandedBox] = useState(null);

  const [totalPrice, setTotalPrice] = useState<number>(0);
  

  
  const calcPrice = () => {
    let price = 0;
    selectedProducts.forEach((p) => {
      price += p.price * p.amount;
    });

    setTotalPrice(price);
  };

  useEffect(() => {
    calcPrice();
  }, [selectedProducts]);

  // const goBack = () => {
  //   history.push("/");
  // };

   const placeOrder = () => {
    const updatedState = products.map((p) => {
      return {
        ...p,
        selected: false,
        amount: 0,
      };
    });
    setProducts(updatedState);
  };
  
   const handleBoxClick = (box: any) => {
    setExpandedBox(box === expandedBox ? null : box);
  }
  
  

    useEffect(() => {
        const indexOfLastProduct = currentPage * 10;
        const indexOfFirstProduct = indexOfLastProduct - 10;
        const currentProducts = allProducts.slice(indexOfFirstProduct, indexOfLastProduct);

        setProducts(currentProducts);
    }, [currentPage]);

    const handleArrowClick = (direction: string, clickedPage: any) => {
        if (direction === 'previous') {
            setCurrentPage(currentPage - 1);
        } else {
            setCurrentPage(currentPage + 1);
        }
        handleClick(clickedPage);
    };

    const handleClick = (pageNumber: number) => {
     if (pageNumber === currentPage) {
        return;
        }
        setCurrentPage(pageNumber);
    };



  return (
    <>
      <Head>
        <title>Igralishte - Product Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title={product.title} />

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-11 mb-5">
                {/* renderiraj gi stavenite vo card to shop produkti */}
            </div>

          {/* kopcinjata za dodavanje/odzemanje quantity, presmetka i sumiranje vkupna suma  */}
            <div className="col-11">
              {/* <button className="btn btn-outline-primary" onClick={goBack}>
                Go To Product List
              </button> */}
              <div style={{ textAlign: "center" }}>
                <div className="basket">
                  {/* {selectedProducts?.map((prod, i) => (
                    <AmountOfProduct
                      key={i}
                      product={prod}
                      onMinusClick={onRemoveItem}
                      onPlusClick={onAddItem}
                    />
                  ))} */}
                </div>
                <p>Вкупно: {totalPrice} ден.</p>
              
                <PrimaryBtn onClick={placeOrder} title="Продолжи" btnClass={"PrimaryBtn w-75"} backgroundColor={"btn-gold"} color='black' height={"41px"} border='1.8px solid #C2C2C2'/>
                
                {/* dodadi funcija so koja dokolku se klikne na ova slikicka, da se isprazni seta niza od produkti !!!  */}
                <img src="../../pictures/icons/Basket.png" alt="empty" />
                {/* {selectedProducts.length === 0 && (
                  <p>EMPTY BASKET</p>
                  )} */}
                
              </div>
            </div>

          {/* Box Component Item  */}
          {boxItemsData.map((boxItem, index) => {
            return (
              <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
            )
          })}

           {/* Other Related Product Items  */}
              <RelatedProducts  products={randomProducts}/>

          {/* pagination  */}
          <div className="text-center mb-5" style={{letterSpacing: "3px"}}>
            {[...Array(totalPages)].map((_, i) => {
              
              const pageNumber = i + 1;
              const isActive = (pageNumber === currentPage) ? "text-danger" : "text-dark";
            return (
                <>
                    {i === 0 ? (
                        <>
                        <button className="bg-transparent border-0 font-weight-bold" >
                        <Link href={`/products?page=${currentPage -1}`} onClick={() => handleArrowClick('previous', currentPage)}>
                            {"<"}
                        </Link>
                        </button>
                        <button className={`bg-transparent border-0 font-weight-bold ${isActive}`} onClick={() => handleClick(pageNumber)}>{pageNumber}</button>
                        </>
                    ) : (
                        <button className={`bg-transparent border-0 font-weight-bold ${isActive}`} onClick={() => handleClick(pageNumber)}>{pageNumber} </button>
                    )}
                    
                    {i === totalPages - 1 ? (
                        <Link href={`/products?page=${currentPage + 1}`} onClick={() => handleClick(currentPage + 1)}>
                            {">"}
                        </Link>
                    ) : null}
                </>
                );
            })}
        </div>
      </div>
    </div>
  </>
  );
};


export default OrderPage;




export const getStaticPaths: GetStaticPaths = async () => {

  const response = await fetch(`http://localhost:5001/products`); 
  const products: DataType["products"] = await response.json();


   const allProducts: ProductType[] = [];

      Object.values(products.vintageClothes).forEach((productList: ProductType[]) => {
          productList.forEach((product: ProductType) => {
              allProducts.push(product);
          });
      });


  const paths = allProducts?.map((product: ProductType) => ({
    params: {
      id: product.id,
    },
  }));

  
  return {
    paths,
    fallback: false,
  };
};



export const getStaticProps: GetStaticProps = async ({ params }) => {

  let product: ProductType | undefined = undefined;
  
  const resBoxItems = await fetch('http://localhost:5001/boxComponents'); 
  const boxItemsData = await resBoxItems.json();
  
  const response = await fetch('http://localhost:5001/products'); 
  const products: DataType["products"] = await response.json();

  const allProducts: ProductType[] = [];

      Object.values(products.vintageClothes).forEach((productList: ProductType[]) => {
          productList.forEach((product: ProductType) => {
              allProducts.push(product);
          });
      });

  
 
const getRandomProducts = (products: ProductType[], quantity: number): ProductType[] => {
   const randomProducts: ProductType[] = [];

   for (let i = 0; i < quantity; i++) {
     const randomIndex = Math.floor(Math.random() * products.length);
     randomProducts.push(products[randomIndex]);

     // Za da nema duplikati
     products.splice(randomIndex, 1);
   }
   return randomProducts;
}

const randomProducts: ProductType[] = getRandomProducts(allProducts, 6);



  if (params?.id) {
    const resProduct = await fetch(`http://localhost:5001/products/${params.id}`);
    product = await resProduct.json();
  }


return {
    props: {
      product,
      allProducts,
      randomProducts,
      boxItemsData
    },
  };
};