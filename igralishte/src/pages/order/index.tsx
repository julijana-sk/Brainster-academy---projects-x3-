import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetServerSideProps, GetStaticPaths, GetStaticProps, NextPage } from 'next';
import BoxComponent from '@/components/BoxComponent';
import PageTitle from '@/components/PageTitle';
import RelatedProducts from '@/components/RelatedProducts';
import { BoxComponentType, DataType, ProductType } from '@/types/types';
import AmountOfProduct from '@/components/AmountOfProduct';
import PrimaryBtn from '@/components/PrimaryBtn';
import Link from 'next/link';
import Pagination from '@/components/Pagination';


interface Props {
  products: ProductType[];
  randomProducts: ProductType[];
  boxItemsData: BoxComponentType[];
}

const OrderPage: NextPage<Props> = ({ products, boxItemsData }) => {
  
  const router = useRouter();  
  const [expandedBox, setExpandedBox] = useState(null);
  const [orderProducts, setOrderProducts] = useState<ProductType[]>([]);


  useEffect(() => {
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const addToCardProducts = JSON.parse(localStorage.getItem('favorites') || '[]');


      if (orderProducts) {
        setOrderProducts(orderProducts);
      }
}, [orderProducts]);
  
  
  const calcPrice = () => {
    let price = 0;
    selectedProducts.forEach((p) => {
      price += p.price * p.amount;
    });

    setTotalPrice(price);
  };

  useEffect(() => {
    calcPrice();
  }, [selectedProducts]);

  const addToCard = (prod: ProductType) => {
    console.log("you clicked ADD TO CARD")
    const updatedAllProducts = products.map((p) => {
      if (p.id === prod.id) {
        return {
          ...p,
          selected: !p.selected,
          amount: p.selected ? 0 : 1,
        };
      }
      return p;
    });
    setSelectedProducts(updatedAllProducts);
  };

   const placeOrder = () => {
    const updatedState = products.map((p) => {
      return {
        ...p,
        selected: false,
        amount: 0,
      };
    });
    setProducts(updatedState);
  };
  
   const handleBoxClick = (box: any) => {
    setExpandedBox(box === expandedBox ? null : box);
  }
  
  
  return (
    <>
      <Head>
        <title>Igralishte-Order</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-11 mb-5">
                {/* renderiraj gi stavenite vo card to shop produkti */}
            </div>

          {/* kopcinjata za dodavanje/odzemanje quantity, presmetka i sumiranje vkupna suma  */}
            <div className="col-11">
              {/* <button className="btn btn-outline-primary" onClick={goBack}>
                Go To Product List
              </button> */}
              <div style={{ textAlign: "center" }}>
                <div className="basket">
                  {/* {selectedProducts?.map((prod, i) => (
                    <AmountOfProduct
                      key={i}
                      product={prod}
                      onMinusClick={onRemoveItem}
                      onPlusClick={onAddItem}
                    />
                  ))} */}
                </div>
                <p>Вкупно: {totalPrice} ден.</p>
              
                <PrimaryBtn onClick={placeOrder} title="Продолжи" btnClass={"PrimaryBtn w-75"} backgroundColor={"btn-gold"} color='black' height={"41px"} border='1.8px solid #C2C2C2'/>
                
                {/* dodadi funcija so koja dokolku se klikne na ova slikicka, da se isprazni seta niza od produkti !!!  */}
                <img src="../../pictures/icons/Basket.png" alt="empty" />
                {/* {selectedProducts.length === 0 && (
                  <p>EMPTY BASKET</p>
                  )} */}
                
              </div>
            </div>

          {/* Box Component Item  */}
          {boxItemsData.map((boxItem, index) => {
            return (
              <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
            )
          })}

           {/* Other Related Product Items  */}
              <RelatedProducts  products={products}/>

          {/* pagination  */}
          <Pagination products={products}/>
      </div>
    </div>
  </>
  );
};


export default OrderPage;


 export const getServerSideProps: GetServerSideProps = async ({query}) => { 
     
     const page = parseInt(query.page as string, 10) || 1;
     
     const response = await fetch(`http://localhost:5001/products?_page=${page}`); 
     const products: ProductType[] = await response.json();

    
    // let resSearchedProducts: Response;

    // if (query.category && query.subcategory) {
    //     resSearchedProducts = await fetch(
    //     `http://localhost:5001/products?category_like=${query.category}&q=${query.subcategory}`
    //     );
    // } else if (query.category) {
    //     resSearchedProducts = await fetch(
    //     `http://localhost:5001/products?category_like=${query.category}`
    //     );
    // } 
    // else if (query.subcategory) {
    //     resSearchedProducts = await fetch(
    //     `http://localhost:5001/products?subcategory_like=${query.subcategory}?_page=${page}`
    //     );

    // } else if (query.subcategory) {
    //     resSearchedProducts = await fetch(
    //     `http://localhost:5001/products?q=${query.subcategory}`
    //     );
    // }  else {
    //     resSearchedProducts = await fetch(`http://localhost:5001/products?_page=${page}`);
    // }

    // const searchedProductsData: ProductType[] = await resSearchedProducts.json();

return { 
    props: { 
        products, 
    },
    }
 }