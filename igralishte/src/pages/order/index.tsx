import React, { useEffect, useState } from 'react'
import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetServerSideProps, NextPage } from 'next';
import BoxComponent from '@/components/BoxComponent';
import RelatedProducts from '@/components/RelatedProducts';
import { BoxComponentType, ProductType } from '@/types/types';
import PrimaryBtn from '@/components/PrimaryBtn';


// interface Props {
//   products: ProductType[];
//   randomProducts: ProductType[];
//   boxItemsData: BoxComponentType[];
// }

// const OrderPage: NextPage<Props> = ({ products, boxItemsData, randomProducts }) => {

//   const router = useRouter();  
//   const [expandedBox, setExpandedBox] = useState(null);
//   const [orderProducts, setOrderProducts] = useState<ProductType[]>([]);const [currentPage, setCurrentPage] = useState<number>(1);


//     const totalPages = Math.ceil(searchedProductsData.length / 10);

//     const start = (currentPage - 1) * 10;
//     const end = start + 10;
//     const paginationProductsForDisplaying = searchedProductsData.slice(start, end);


//   useEffect(() => {
//     const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
//     const addToCardProducts = JSON.parse(localStorage.getItem('favorites') || '[]');


//       if (orderProducts) {
//         setOrderProducts(orderProducts);
//       }
// }, [orderProducts]);
  

//     const handlePageChange = (page: number) => {
//         if (page < 1 || page > totalPages) return;
//         setCurrentPage(page);
//     };

//     const renderPages = () => {
//         return Array.from({ length: totalPages }, (_, index) => (
//               <a
//                 key={index}
//                 className={`flex-c-m how-pagination1 trans-04 m-all-7 pointer font-weight-bold ${
//                   currentPage === index + 1
//                     ? "active-pagination1 text-danger"
//                     : ""
//                 }`}
//                 onClick={() => handlePageChange(index + 1)}>
//                 {index + 1}
//               </a>
//         ));
//     };

  
//   const calcPrice = () => {
//     let price = 0;
//     selectedProducts.forEach((p) => {
//       price += p.price * p.amount;
//     });

//     setTotalPrice(price);
//   };

//   useEffect(() => {
//     calcPrice();
//   }, [selectedProducts]);

//   const addToCard = (prod: ProductType) => {
//     console.log("you clicked ADD TO CARD")
//     const updatedAllProducts = products.map((p) => {
//       if (p.id === prod.id) {
//         return {
//           ...p,
//           selected: !p.selected,
//           amount: p.selected ? 0 : 1,
//         };
//       }
//       return p;
//     });
//     setSelectedProducts(updatedAllProducts);
//   };

//    const placeOrder = () => {
//     const updatedState = products.map((p) => {
//       return {
//         ...p,
//         selected: false,
//         amount: 0,
//       };
//     });
//     setProducts(updatedState);
//   };
  
//    const handleBoxClick = (box: any) => {
//     setExpandedBox(box === expandedBox ? null : box);
//   }
  
  
//   return (
//     <>
//       <Head>
//         <title>Igralishte-Order</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//         <div className="container-fluid my-5">
//           <div className="row d-flex flex-column justify-content-center">
//             <div className="col-11 mb-5">
//                 {/* renderiraj gi stavenite vo card to shop produkti */}
//             </div>

//           {/* kopcinjata za dodavanje/odzemanje quantity, presmetka i sumiranje vkupna suma  */}
//             <div className="col-11">
//               {/* <button className="btn btn-outline-primary" onClick={goBack}>
//                 Go To Product List
//               </button> */}
//               <div style={{ textAlign: "center" }}>
//                 <div className="basket">
//                   {/* {selectedProducts?.map((prod, i) => (
//                     <AmountOfProduct
//                       key={i}
//                       product={prod}
//                       onMinusClick={onRemoveItem}
//                       onPlusClick={onAddItem}
//                     />
//                   ))} */}
//                 </div>
//                 <p>Вкупно: {totalPrice} ден.</p>
              
//                 <PrimaryBtn onClick={placeOrder} title="Продолжи" btnClass={"PrimaryBtn w-75"} backgroundColor={"btn-gold"} color='black' height={"41px"} border='1.8px solid #C2C2C2'/>
                
//                 {/* dodadi funcija so koja dokolku se klikne na ova slikicka, da se isprazni seta niza od produkti !!!  */}
//                 <img src="../../pictures/icons/Basket.png" alt="empty" />
//                 {/* {selectedProducts.length === 0 && (
//                   <p>EMPTY BASKET</p>
//                   )} */}
                
//               </div>
//             </div>

//           {/* Box Component Item  */}
//           {boxItemsData.map((boxItem, index) => {
//             return (
//               <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
//             )
//           })}

//            {/* Other Related Product Items  */}
//               <RelatedProducts  products={randomProducts}/>

//            {/* pagination  */}
//               <div className="flex-l-m flex-w w-full p-t-10 m-lr--7" style={{ letterSpacing: "5px" }}>
//                   <button onClick={() => handlePageChange(currentPage - 1)} className='bg-transparent border-0 mr-1'>
//                       {"<"}
//                   </button>
//                   {renderPages()}
//                   <button onClick={() => handlePageChange(currentPage + 1)} className='bg-transparent border-0 ml-1'>
//                       {">"}
//                   </button>
//               </div>
//       </div>
//     </div>
//   </>
//   );
// };


// export default OrderPage;


//  export const getServerSideProps: GetServerSideProps = async ({query}) => { 
     
// const page = parseInt(query.page as string, 10) || 1;
//      let randomNo: number | undefined;
     
//      const response = await fetch(`http://localhost:5001/products?_page=${page}`); 
//      const products: ProductType[] = await response.json();
   
//     const resBoxItems = await fetch('http://localhost:5001/boxComponents');
//     const boxItemsData: BoxComponentType[] = await resBoxItems.json(); 
    

//     products.map(() => {
//       if (products.length > 6) {
//         randomNo = Math.floor(Math.random() * (products.length - 6));
//       }
//     });
    

//     const resRandomProducts = await fetch(`http://localhost:5001/products?_start=${randomNo}&_limit=6`);
//     const randomProducts: ProductType[] = await resRandomProducts.json();


// return { 
//     props: { 
//         products,
//         randomProducts,
//         boxItemsData,
//     },
//     }
//  }