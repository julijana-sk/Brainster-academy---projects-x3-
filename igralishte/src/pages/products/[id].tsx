import React, { useEffect, useState } from 'react'
import { GetStaticPaths, GetStaticProps, GetStaticPropsContext, NextPage } from 'next';
import { BoxComponentType, ProductType } from '@/types/types';
import Head from 'next/head';
import AmountOfProduct from '@/components/AmountOfProduct';
import BoxComponent from '@/components/BoxComponent';
import PrimaryBtn from '@/components/PrimaryBtn';
import RelatedProducts from '@/components/RelatedProducts';
import Link from 'next/link';
import Slider from '@/components/Slider';
import PaginationId from '@/components/PaginationId';



interface Props {
  product: ProductType;
  products: ProductType[];
  randomProducts: ProductType[];
  boxItemsData: BoxComponentType[];
}

const ProductDetailPage: NextPage<Props> = ({ product, products, boxItemsData, randomProducts }) => {

  const [expandedBox, setExpandedBox] = useState(null);
  
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(products.length / 10);
  
  const [selectedProducts, setSelectedProducts] = useState<ProductType[]>([]);
  const [isFavorite, setIsFavorite] = useState(false);
  const [favorites, setFavorites] = useState<ProductType[]>([]);
  // const [addToCard, setAddToCard] = useState(false);


     useEffect(() => {
        const indexOfLastProduct = currentPage * 10;
        const indexOfFirstProduct = indexOfLastProduct - 10;
        const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct);

        setSelectedProducts(currentProducts);
    }, [currentPage]);
 

 const toggleFavorite = (id: any) => {
    const updatedFavorites = isFavorite
      ? favorites.filter((favId: any) => favId !== id)
      : [...favorites, id];
    localStorage.setItem('favorites', JSON.stringify(updatedFavorites));
    setFavorites(updatedFavorites);
    setIsFavorite(!isFavorite);
};

  const handleBoxClick = (box: any) => {
    setExpandedBox(box === expandedBox ? null : box);
  }


  // const clickProduct = (prod: ProductType) => {
  //   const updatedProducts = products.map((p) => {
  //     if (p.id === prod.id) {
  //       return {
  //         ...p,
  //         selected: !p.selected,
  //         amount: p.selected ? 0 : 1,
  //       };
  //     }
  //     return p;
  //   });
  //   setSelectedProducts(updatedProducts);
  // };


   const addToCard = (prod: ProductType) => {
    const updatedAllProducts = products.map((p) => {
      if (p.id === prod.id) {
        return {
          ...p,
          selected: !p.selected,
          amount: p.selected ? 0 : 1,
        };
      }
      return p;
    });
    setSelectedProducts(updatedAllProducts);
  };


  const placeOrder = () => {
    const updatedState = products.map((p) => {
      return {
        ...p,
        selected: false,
        amount: 0,
      };
    });
    setSelectedProducts(updatedState);
  };

  const onAddItem = (prod: ProductType) => {
    console.log("you clicked plus")
    setSelectedProducts((prevState) => {
      return prevState.map((p) => {
        if (p.id === prod.id) {
          return {
            ...p,
            amount: p.amount + 1,
          };
        }
        return p;
      });
    });
  };

  const onRemoveItem = (prod: ProductType) => {
    console.log("you clicked minus")
    if (prod.amount === 1) {
      setSelectedProducts((prevState) => {
        return prevState.map((p) => {
          if (p.id === prod.id) {
            return {
              ...p,
              selected: false,
              amount: 0,
            };
          }
          return p;
        });
      });
    } else {
      setSelectedProducts((prevState) => {
        return prevState.map((p) => {
          if (p.id === prod.id) {
            return {
              ...p,
              amount: p.amount - 1,
            };
          }
          return p;
        });
      });
    }
  };

    const handleArrowClick = (direction: string, clickedPage: any) => {
        if (direction === 'previous') {
            setCurrentPage(currentPage - 1);
        } else {
            setCurrentPage(currentPage + 1);
        }
        handleClick(clickedPage);
    };

    const handleClick = (pageNumber: number) => {
     if (pageNumber === currentPage) {
        return;
        }
        setCurrentPage(pageNumber);
    };

  
  return (
    <>
      <Head>
        <title>Igralishte-Product Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


        <div className="container-fluid my-5">
          <div className="row flex-column justify-content-center">
            <div className="col-11 mb-5 mr-auto ml-auto">
              <div>
                <h1 className='title' style={{textAlign: 'left'}}>{product.title}</h1>
                <Slider product={product}/>
              </div>

                
                <div className='flex-column add-to-card-fixed'>
                  {/* <Link href={"/"} className="nav-link d-flex flex-row justify-content-start"> */}
                    <button className="menu-footer-button mb-3"
                            onClick={(event: React.MouseEvent<HTMLElement>) => {
                            event.preventDefault();
                            toggleFavorite(product.id);
                          }}
                    ><img src="../pictures/icons/heart-straight-thin.png" /></button>
                  {/* </Link> */}
                  {/* <Link href={"/"} className="nav-link d-flex flex-row justify-content-start"> */}
                    <button className="menu-footer-button"
                            onClick={(event: React.MouseEvent<HTMLElement>) => {
                            event.preventDefault();
                            // toggleAddToCard(product.id);
                          }}
                    ><img src="../pictures/icons/shopping cart.png" /></button>
                  {/* </Link> */}
                </div>
                <span className="title text-left">{product.price}  ден.</span>
                <p className="text-left my-3">{product.description}</p>
                <AmountOfProduct
                      key={product.id}
                      product={product}
                      onMinusClick={onRemoveItem}
                      onPlusClick={onAddItem}
                    />
                <div className="flex-row justify-content-start align-items-center align-self-center">
                  <PrimaryBtn onClick={() => addToCard(product)} title="Додај во кошничка" btnClass={"PrimaryBtn add w-50 mr-3"} backgroundColor={"linear-gradient(0deg, #FFDBDB, #FFDBDB)"} color='black' height={"41px"} border='1.8px solid #C2C2C2'/>
                  <i
                  onClick={(event: React.MouseEvent<HTMLElement>) => {
                      event.preventDefault();
                      toggleFavorite(product.id);
                    }}
                    // className={isFavorite && selectedRestaurantId === product.id ? "fas fa-heart fa-3x" : "far fa-heart fa-3x"}
                    className={isFavorite ? "fas fa-heart fa-2x" : "far fa-heart fa-2x"}
                  ></i>
                </div>
                <hr style={{paddingTop: '0.5px', background: "linear-gradient(99.4deg, #FFF0BF -10.68%, #EFC990 18.14%, #FDD292 43.87%, rgba(240, 199, 73, 0.42) 81.17%, #D4AF37 100%)"}}/>
                <div className='flex-row my-3 justify-content-start align-items-center text-left '>
                  <p className='title '>Величина: </p>
                  <div className="border-0 px-2 mx-3" style={{backgroundColor: "#FFDBDB", borderRadius: '4px'}}>{product.model_size}</div>
                  <p className='about-text text-dark'>*само 1 парче</p>
                </div>
                <p>{product.size_description}</p>
                <Link href='#'><p style={{textDecoration: 'underline'}}>види ги димензиите</p></Link>
                <hr style={{paddingBottom: '0.5px', background: "linear-gradient(99.4deg, #FFF0BF -10.68%, #EFC990 18.14%, #FDD292 43.87%, rgba(240, 199, 73, 0.42) 150%, #D4AF37 0%)"}}/>
                <div className='flex-row my-3 title justify-content-start align-items-center text-left '>
                  <p>Боја: </p>
                  <div className="border mx-2 p-2" style={{background: `${product.color}`, borderRadius: '4px'}} />
                  <p className='about-text text-dark'>{product.color}</p>
                </div>
                <p className='title text-left'>Материјал: </p>
                  {product.material}
                <div className="flex-row justify-content-start align-items-center">
                  <p className='mr-2'>Постава:</p> 
                  {product.composition}
                </div>
                <div className="flex-row my-3 justify-content-start align-items-center">
                  <p className='title mr-3'>Состојба: {product.condition}</p>
                  <Link href='#'><p style={{textDecoration: 'underline'}}>прочитај повеќе</p></Link>
                </div>
                <p className='title text-left'>Насоки за одржување: </p>
                {product.care_instructions}
                <hr style={{paddingBottom: '0.5px', background: "linear-gradient(99.4deg, #FFF0BF -10.68%, #EFC990 18.14%, #FDD292 43.87%, rgba(240, 199, 73, 0.42) 150%, #D4AF37 0%)"}}/>
                <p className='title text-left'>Ознаки:</p>
                <div className="flex-row mt-2 my-3 justify-content-start align-items-center">
                  <Link href="#" className="badge badge-pill badge-light mb-2 py-2 px-3 mr-1 border-2" style={{boxShadow: "0px 0px 2.3195877075195312px 0px #C2C2C2"}}>{product.subcategory}</Link>
                  <Link href="#" className="badge badge-pill badge-light mb-2 py-2 px-3 mr-1 border-2" style={{boxShadow: "0px 0px 2.3195877075195312px 0px #C2C2C2"}}>{product.category}</Link>
                  <Link href="#" className="badge badge-pill badge-light mb-2 py-2 px-3 mr-1 border-2" style={{boxShadow: "0px 0px 2.3195877075195312px 0px #C2C2C2"}}>{product.material}</Link>
                  <Link href="#" className="badge badge-pill badge-light mb-2 py-2 px-3 border-2" style={{boxShadow: "0px 0px 2.3195877075195312px 0px #C2C2C2"}}>{product.color}</Link>
                </div>
            </div>

          {/* Box Component Item  */}
          {boxItemsData.map((boxItem, index) => {
            return (
              <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
            )
          })}

           {/* Other Related Product Items  */}
              <RelatedProducts products={randomProducts}/>
              <PaginationId id={product.id} products={randomProducts}/>

      </div>
    </div>
  </>
  );
};


export default ProductDetailPage;



export const getStaticPaths: GetStaticPaths = async () => {

  const response = await fetch('http://localhost:5001/products'); 
  const products: ProductType[] = await response.json();

  const paths = products.map((product: ProductType) => ({
      params: {
        id: product.id,
      },
    }));

  
  return {
    paths,
    fallback: false,
  };
};


export const getStaticProps: GetStaticProps = async ({ params }: GetStaticPropsContext) => {
  
  let product: ProductType | undefined;
  let randomNo: number | undefined;
  
  
  const resBoxItems = await fetch('http://localhost:5001/boxComponents');
  const boxItemsData = await resBoxItems.json();

  
  const response = await fetch('http://localhost:5001/products'); 
  const products: ProductType[] = await response.json();


  products.map(() => {
    if (products.length > 6) {
      randomNo = Math.floor(Math.random() * (products.length - 6));
    }
  });
  

  const resRandomProducts = await fetch(`http://localhost:5001/products?_start=${randomNo}&_limit=6`);
  const randomProducts: ProductType[] = await resRandomProducts.json();


  const  resProduct = await fetch(`http://localhost:5001/products/${params?.id}`);
  product = await resProduct.json();


  return {
    props: {
      product,
      products,
      randomProducts,
      boxItemsData
    },
  };
};