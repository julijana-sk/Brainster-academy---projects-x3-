import BoxComponent from '@/components/BoxComponent';
import PageTitle from '@/components/PageTitle';
import ProductItem from '@/components/ProductItem';
import RelatedProducts from '@/components/RelatedProducts';
import { UserContext } from '@/context/UserContext';
import { BoxComponentType, DataType, ProductType, VintageClothesType } from '@/types/types';
import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useContext, useState } from 'react'



interface Props {
  product: ProductType;
  products: DataType["products"];
  allProducts: ProductType[];
  // randomProducts: ProductType[];
  boxItemsData: BoxComponentType[];
}

const ProductDetailPage: NextPage<Props> = ({ product, products, allProducts, boxItemsData }) => {


  const { getRandomProducts} = useContext(UserContext);


  const randomProducts: ProductType[] = getRandomProducts(allProducts, 6);


// Render the randomProducts items
randomProducts.forEach((product: ProductType) => {
    console.log(product);
});


  const router = useRouter();

  const [expandedBox, setExpandedBox] = useState(null);
   
  const [page, setPage] = useState(1);
  const totalPages = 10;
  const [itemProducts, setItemProducts] = useState(allProducts.slice(0, 10));
  const [currentIndex, setCurrentIndex] = useState(0);
  const [activePage, setActivePage] = useState(1);
    
const handlePrevClick = () => {
        setPage(page - 1);
        setActivePage(page - 1);
        if (currentIndex > 0) {
        setCurrentIndex(currentIndex - 10);
        setItemProducts(allProducts.slice(currentIndex - 10, currentIndex));
        }
  };

  const handleNextClick = () => {
    setPage(page + 1);
        setActivePage(page + 1);
        if (currentIndex + 10 < allProducts.length) {
        setCurrentIndex(currentIndex + 10);
        setItemProducts(allProducts.slice(currentIndex + 10, currentIndex + 20));
        }
  };

  const handleBoxClick = (box: any) => {
    setExpandedBox(box === expandedBox ? null : box);
  }
  
  return (
    <>
      <Head>
        <title>Igralishte - Product Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title={product.title} />

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-12 mb-5">
                <h4 className="text-center">{product.title}</h4>
                <img src={`${product.img}`}/>
                <span className="text-center">{product.price}</span>
                <p className="text-left">{product.description}</p>
                <p>da se selektira kolku parcinja sakame counter??</p>
                <p>Size: {product.model_size}</p>
                <p>Size description????????</p>
                <p>Size dimension link?????</p>
                <p>Color: {product.color}</p>
                <p>Material: {product.material}</p>
                <p>Condition and read more about condition link????: {product.condition}</p>

                <p>Мaintenance guidelines: {product.care_instructions}</p>
                <p>Product tags: ??????? Treba da prebaram kako se pravat{product.category} {product.brand} {product.color}</p>
            </div>

          {/* Box Component Item  */}
          {boxItemsData.map((boxItem, index) => {
            return (
              <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
            )
          })}

           {/* Related Product Items  */}
              <RelatedProducts products={randomProducts}/>

          <div className="d-flex flex-row">
            <div className="col-12 text-center mb-5" style={{letterSpacing: "3px"}}>
                {allProducts.length > 10 && (
                    <>
                    <button className="bg-transparent border-0 mr-3" onClick={handlePrevClick} disabled={page === 1}>
                        {'<'}
                    </button>
                    <span>{page} • {page + 1} • {page + 2} • {page + 3} • {page + 4} ... {totalPages}</span>
                    <button className="bg-transparent border-0 ml-3" onClick={handleNextClick} disabled={page === totalPages}>
                        {'>'}
                    </button>
                    </>
                )}
            </div>
          </div>
      </div>
    </div>
  </>
  );
};


export default ProductDetailPage;



export const getStaticPaths: GetStaticPaths = async () => {

  const response = await fetch(`http://localhost:5001/products`); 
  const products: DataType["products"] = await response.json();


   const allProducts: ProductType[] = [];

      Object.values(products.vintageClothes).forEach((productList: ProductType[]) => {
          productList.forEach((product: ProductType) => {
              allProducts.push(product);
          });
      });


  const paths = allProducts?.map((product: ProductType) => ({
    params: {
      id: product.id,
    },
  }));

  
  return {
    paths,
    fallback: false,
  };
};



export const getStaticProps: GetStaticProps = async ({ params }) => {

  let product: ProductType | undefined = undefined;
  
  const resBoxItems = await fetch('http://localhost:5001/boxComponents'); 
  const boxItemsData = await resBoxItems.json();
  
  const response = await fetch(`http://localhost:5001/products`); 
  const products: DataType["products"] = await response.json();

  const allProducts: ProductType[] = [];

      Object.values(products.vintageClothes).forEach((productList: ProductType[]) => {
          productList.forEach((product: ProductType) => {
              allProducts.push(product);
          });
      });

  
  let randomProducts: ProductType[] = [];
  
  if (allProducts.length > 6) {
      const randomNo = Math.floor(Math.random() * (allProducts.length - 6));
      const resRandomProducts = await fetch(`http://localhost:5001/products?_start=${randomNo}&_limit=6`);
      randomProducts = await resRandomProducts.json();
    }
    
    // console.log(params?.id)
    // console.log(randomProducts)

//     let allproducts: ProductType[] = [];

//     vintageClothes.forEach((category: SubcategoryType) => {
//         Object.values(category).forEach((productList: ProductType[]) => {
//             productList.forEach((product: ProductType) => {
//             if (allproducts.length <= 10 && product.id) {
//                 allproducts?.push(product);
//               } else {
//                 return;
//               }
//             });
//           });
//     });
// console.log(params?.id)

  if (params?.id) {
    const resProduct = await fetch(`http://localhost:5001/products/${params.id}`);
    product = await resProduct.json();
  }


return {
    props: {
      product,
      allProducts,
      randomProducts,
      boxItemsData
    },
  };
};