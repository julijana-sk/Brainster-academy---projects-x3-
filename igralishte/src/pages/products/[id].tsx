import BoxComponent from '@/components/BoxComponent';
import PageTitle from '@/components/PageTitle';
import { BoxComponentType, ProductType, SubcategoryType } from '@/types/types';
import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useState } from 'react'



interface Props {
  product: ProductType;
  allproducts: ProductType[];
  boxItemsData: BoxComponentType[];
}

const ProductDetailPage: NextPage<Props> = ({ product, allproducts, boxItemsData }) => {

  const router = useRouter();
// const { id } = router.query;

// if (router.isFallback) {
// return <div>Loading...</div>;
// }

  const [expandedBox, setExpandedBox] = useState(null);
   
  const [page, setPage] = useState(1);
  const totalPages = 10;
  const [itemProducts, setItemProducts] = useState(allproducts.slice(0, 10));
  const [currentIndex, setCurrentIndex] = useState(0);
  const [activePage, setActivePage] = useState(1);
    
const handlePrevClick = () => {
        setPage(page - 1);
        setActivePage(page - 1);
        if (currentIndex > 0) {
        setCurrentIndex(currentIndex - 10);
        setItemProducts(allproducts.slice(currentIndex - 10, currentIndex));
        }
  };

  const handleNextClick = () => {
    setPage(page + 1);
        setActivePage(page + 1);
        if (currentIndex + 10 < allproducts.length) {
        setCurrentIndex(currentIndex + 10);
        setItemProducts(allproducts.slice(currentIndex + 10, currentIndex + 20));
        }
  };

  const handleBoxClick = (box: any) => {
    setExpandedBox(box === expandedBox ? null : box);
  }
  
  return (
    <>
      <Head>
        <title>{product.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title={product.title} />

        <div className="container-fluid my-5">
          <div className="row d-flex flex-column justify-content-center">
            <div className="col-12 h-100">
              {allproducts?.map((item) => {
                if (product.id === item.id) {
                  return (
                      < div key={item.id}>
                      <img src={item.img} alt="IMG-PRODUCT" />
                      </div>
                      )
                    }
              })}
            </div>
            <div className="col-12">
                <h4 className="text-center">{product.title}</h4>
                <span className="text-center">{product.price}</span>
                <p className="text-left">{product.description}</p>
          </div>
            <div className="col-12">
              <img src="../../pictures/about-banner1.png" alt="probna slikicka" />
              {product.id}
              </div>

          {/* Box Component Item  */}
          {boxItemsData.map((boxItem, index) => {
            return (
              <BoxComponent key={index} boxItem={boxItem} onClick={() => handleBoxClick(boxItem)} expanded={boxItem === expandedBox}/>
            )
          })}


          {/* <RelatedProducts products={randomProducts}/> */}


          <div className="d-flex flex-row">
            <div className="col-12 text-center mb-5" style={{letterSpacing: "3px"}}>
                {allproducts.length > 10 && (
                    <>
                    <button className="bg-transparent border-0 mr-3" onClick={handlePrevClick} disabled={page === 1}>
                        {'<'}
                    </button>
                    <span>{page} • {page + 1} • {page + 2} • {page + 3} • {page + 4} ... {totalPages}</span>
                    <button className="bg-transparent border-0 ml-3" onClick={handleNextClick} disabled={page === totalPages}>
                        {'>'}
                    </button>
                    </>
                )}
            </div>
          </div>
      </div>
    </div>
  </>
  );
};


export default ProductDetailPage;



export const getStaticPaths: GetStaticPaths = async () => {

  const resClothes = await fetch('http://localhost:5001/vintageClothes');
  const vintageClothes: SubcategoryType[] = await resClothes.json();


// OPTION 1
  const allproducts = vintageClothes?.flatMap((category) => {
    return Object.values(category).flatMap((productList: ProductType[]) => productList);
  });

  const paths = allproducts?.map((product: ProductType) => ({
    params: {
      id: product.id,
    },
  }));
  
  return {
    paths,
    fallback: false,
  };
};


// OPTION 2
//   let allproducts: ProductType[] = []


//   const pathsArray = vintageClothes.forEach((category: SubcategoryType) => {
//         Object.values(category).forEach((productList: ProductType[]) => {
//             productList.forEach((product: ProductType) => {
//                 allproducts?.push(product);
            
//             });
//         });
//     });

//   const paths = allproducts.map((item) => {
//           return (
//                 {id: item.id.toString()}
//               )
//             }
//       )

//   return {
//     paths,
//     fallback: false,
//   };
// }


export const getStaticProps: GetStaticProps = async ({ params }) => {

  let product: ProductType | undefined = undefined;
  
  const resBoxItems = await fetch('http://localhost:5001/boxComponents');
  const boxItemsData = await resBoxItems.json();

  const resProductsCount = await fetch("http://localhost:5001/vintageClothes");
  const vintageClothes: SubcategoryType[] = await resProductsCount.json();

  
  // let randomProducts: ProductType[] = [];
  
  // if (allproducts.length > 4) {
    //   const randomNo = Math.floor(Math.random() * (allproducts.length - 4));
    //   const resRandomProducts = await fetch(`http://localhost:5001/products?_start=${randomNo}&_limit=4`);
    //   randomProducts = await resRandomProducts.json();
    // }
    

    let allproducts: ProductType[] = []

    vintageClothes.forEach((category: SubcategoryType) => {
        Object.values(category).forEach((productList: ProductType[]) => {
            productList.forEach((product: ProductType) => {
            if (allproducts.length <= 10 && product.id) {
                allproducts?.push(product);
              } else {
                return;
              }
            });
          });
    });
console.log(params?.id)

  if (params?.id) {
    const resProduct = await fetch(`http://localhost:5001/vintageClothes/${params.id}`);
    product = await resProduct.json();
  }


return {
    props: {
      product,
      allproducts,
      boxItemsData
    },
  };
};