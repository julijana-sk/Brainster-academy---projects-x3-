import React, { useState } from 'react'
import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next';
import { AccessoriesType, ProductType, VintageClothes } from '@/types/types';
import { useRouter } from 'next/router';
import ProductItem from '@/components/ProductItem';



interface Props {
  vintageClothes: VintageClothes[];
  searchedProductsData: ProductType[];
  products: ProductType[];
  allproducts: ProductType[];
}

const ProductPage: NextPage<Props> = ({vintageClothes, searchedProductsData, products, allproducts}) => {
    
    const router = useRouter();
    const [page, setPage] = useState(1);
    const totalPages = Math.ceil(allproducts.length / 10);

    const handleNextPage = () => {
        setPage(page + 1);
    };

    const handlePreviousPage = () => {
        setPage(page - 1);
    };



  return (
    < >

      <Head>
        <title>Igralishte - Product</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

    {/* <div className="container"> */}
        {/* <div className='row d-flex flex-column'> */}
        
        <div className='col-12'>
        {/* navbar nad produktite  */}
            <div className="flex-w flex-sb-m p-b-52">
                {/* search */}
                <div className="panel-search w-full p-t-10 p-b-15">
                <div className="bor8 dis-flex p-l-15">
                    <button className="">
                    <i className="zmdi zmdi-search"></i>
                    </button>

                    <input

                        className="mtext-107 cl2 size-114 plh2 p-r-15"

                        type="search"

                        name="search-product"

                        placeholder="Search"

                        onChange={(event) => {
                        event.preventDefault();
                        router.push({
                        pathname: "/product",
                        query: {
                            ...router.query,
                            query: event.target.value,
                            },
                        });
                    }}

                        />
                </div>
                </div>
                {/* filtri selekt kopcinja */}
                <div className="flex-w flex-l-m filter-tope-group m-tb-10">
                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 how-active1"
                    data-filter="*"
                    onClick={() => {
                    router.replace({
                    pathname: "/product",
                    });
                }}>
                    All Products
                </button>

                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                    data-filter=".women"
                    onClick={() => {
                        router.push({
                        pathname: "/product",
                        query: {
                            ...router.query,
                            gender: "women",
                        },
                        });
                    }}
                >
                    Women
                </button>

                <button className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" data-filter=".men"
                onClick={() => {
                        router.push({
                        pathname: "/product",
                        query: {
                            ...router.query,
                            gender: "man",
                        },
                        });
                    }}>
                    Men
                </button>

                <button 
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" 
                    data-filter=".bag" 
                    onClick={() => {
                        router.push({
                        pathname: "/product",
                        query: {
                            ...router.query,
                            query: "Belt"
                        }
                        });
                    }} >
                    Belt
                </button>

                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                    data-filter=".shoes"
                    onClick={() => {
                        router.push({
                        pathname: "/product",
                        query: {
                            ...router.query,
                            query: "converse"
                        }
                        });
                    }} >
                    Shoes
                </button>

                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                    data-filter=".watches"
                    onClick={() => {
                        router.push({
                        pathname: "/product",
                        query: {
                            ...router.query,
                            query: "watch"
                        }
                        });
                    }} >
                    Watches
                </button>
                </div>

            </div>
        {/* search END */}
        </div>
        <div className="container my-5">
          <div  className="row d-flex flex-row flex-wrap">
            <div className="container">
              <div  className="row d-flex flex-row flex-wrap">
                <div className="col-12 d-flex flex-row flex-wrap justify-content-around">
                {allproducts.length > 0 ? (
                    allproducts.map((product, productIndex) => {
                        
                    let columnSize = "col-5 product-img-small";
                    let columnText = "product-text-a"
                    if ((productIndex + 1) % 3 === 0) {columnSize = "col-11"; columnText = "product-text"}
                        return (
                            <div key={productIndex} className={`${columnSize} ${columnText} p-0 mb-2`}>
                            <ProductItem  product={product}  />
                            </div>
                        );
                    })
                    ) : (
                        <div>No products found.</div>
                )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* pagination */}
          <div className="d-flex flex-row">
            <div className="col-12 bg-primary ">
                <button onClick={handlePreviousPage} disabled={page === 1}>
                    Previous
                </button>
                <span>Page {page} of {totalPages}</span>
                <button onClick={handleNextPage} disabled={page === totalPages}>
                    Next
                </button>
            </div>
        </div>

    </>
  ); 
};

export default ProductPage;


export const getServerSideProps: GetServerSideProps = async ({query}) => {
    
const page = parseInt(query.page as string, 10) || 1;

const resProductClothes = await fetch(`http://localhost:5001/vintageClothes?limit=10&page=${page}`);
const vintageClothes: VintageClothes[] = await resProductClothes.json();

const resAccessories = await fetch(`http://localhost:5001/accessories?limit=10&page=${page}`);
const accessories: AccessoriesType[] = await resAccessories.json();


const response = await fetch(`http://localhost:5001?limit=10&page=${page}`);
const products: ProductType[] = await response.json();

// let resSearchedProducts: Response;

//   if (query.gender && query.query) {
//     resSearchedProducts = await fetch(
//       `http://localhost:5001/products?gender_like=${query.gender}&q=${query.query}`
//     );
//   } else if (query.gender) {
//     resSearchedProducts = await fetch(
//       `http://localhost:5001/products?gender_like=${query.gender}`
//     );
//   } else if (query.query) {
//     resSearchedProducts = await fetch(
//       `http://localhost:5001/products?q=${query.query}`
//     );
//   }  else {
//     resSearchedProducts = await fetch("http://localhost:5001/products");
//   }

//   const searchedProductsData: ProductType[] = await resSearchedProducts.json();



let allproducts: ProductType[] = []


    vintageClothes.forEach((category: VintageClothes) => {
        Object.values(category).forEach((productList: ProductType[]) => {
            productList.forEach((product: ProductType) => {
            if (allproducts.length <= 10 && product.id) {
                allproducts?.push(product);
            } else {
                return;
            }
            });
        });
    });

    accessories.forEach((accessory: AccessoriesType) => {
        Object.values(accessory).forEach((product: ProductType) => {
            if (allproducts.length <= 10 && product.id) {
            allproducts?.push(product);
            } else {
            return;
            }
        });
    });
    

  return {
      props: {
        products,
        allproducts,
        vintageClothes,
        accessories,
        page
      },
    }
}
