import React from 'react'
import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next';
import ProductItem from '@/components/ProductItem';
import { ProductType } from '@/types/types';
import { useRouter } from 'next/router';
import Pagination from '@/components/Pagination';


interface Props {
  products: ProductType[];
  searchedProductsData: ProductType[];
}

const ProductPage: NextPage<Props> = ({  products, searchedProductsData }) => {
    
    
    const router = useRouter();
   

  return (
    < >

      <Head>
        <title>Igralishte - Product</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='col-12'>
        {/* navbar nad produktite  */}
            <div className="flex-w flex-sb-m p-b-52">
                {/* search */}
                {/* <div className="panel-search w-full p-t-10 p-b-15">
                <div className="bor8 dis-flex p-l-15">
                    <button className="">
                    <i className="zmdi zmdi-search"></i>
                    </button>

                    <input

                        className="mtext-107 cl2 size-114 plh2 p-r-15"

                        type="search"

                        name="search-product"

                        placeholder="Search"

                        onChange={(event) => {
                        event.preventDefault();
                        router.push({
                        pathname: "/products",
                        query: {
                            ...router.query,
                            query: event.target.value,
                            },
                        });
                    }}

                        />
                </div>
                </div> */}
                {/* filtri selekt kopcinja */}
                <div className="flex-w flex-l-m filter-tope-group m-tb-10">
                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 how-active1"
                    data-filter="*"
                    onClick={() => {
                    router.replace({
                    pathname: "/products",
                    });
                }}>
                    All Products
                </button>

                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                    data-filter=".women"
                    onClick={() => {
                        router.push({
                        pathname: "/products",
                        query: {
                            ...router.query,
                            gender: "women",
                        },
                        });
                    }}
                >
                    Women
                </button>

                <button className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" data-filter=".men"
                onClick={() => {
                        router.push({
                        pathname: "/products",
                        query: {
                            ...router.query,
                            gender: "man",
                        },
                        });
                    }}>
                    Men
                </button>

                <button 
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" 
                    data-filter=".bag" 
                    onClick={() => {
                        router.push({
                        pathname: "/products",
                        query: {
                            ...router.query,
                            query: "Belt"
                        }
                        });
                    }} >
                    Belt
                </button>

                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                    data-filter=".shoes"
                    onClick={() => {
                        router.push({
                        pathname: "/products",
                        query: {
                            ...router.query,
                            query: "converse"
                        }
                        });
                    }} >
                    Shoes
                </button>

                <button
                    className="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5"
                    data-filter=".watches"
                    onClick={() => {
                        router.push({
                        pathname: "/products",
                        query: {
                            ...router.query,
                            query: "watch"
                        }
                        });
                    }} >
                    Watches
                </button>
                </div>

            </div>
        {/* search END */}
        </div>
        <div className="container my-5">
          <div  className="row flex-row flex-wrap">
            <div className="container">
              <div  className="row flex-row">
                <div className="col-12 flex-row flex-wrap justify-content-around">
                  {searchedProductsData.length > 0 ? (
                    searchedProductsData?.map((product, productIndex) => {
                    let columnSize = "col-5 product-img-small";
                    let columnText = "product-text-a"
                    for (let i = 2; i < searchedProductsData.length; i += 5) {
                    if (productIndex === i ) {columnSize = "col-11"; columnText = "product-text"}}
                        return (
                            <div key={productIndex} className={`${columnSize} ${columnText} p-0 mb-2`}>
                            <ProductItem   id={product.id} title={product.title} img={product.img} price={product.price}/>
                            </div>
                        );
                    })
                    ) : (
                        <div>No products found.</div>
                    )}

                </div>
              </div>
            </div>
          </div>
        </div>
        {/* pagination  */}
        <Pagination products={searchedProductsData}/>

    </>
  ); 
};

export default ProductPage;



 export const getServerSideProps: GetServerSideProps = async ({query}) => { 
     
     const page = parseInt(query.page as string, 10) || 1;
     
     const response = await fetch(`http://localhost:5001/products?_page=${page}`); 
     const products: ProductType[] = await response.json();

    
    let resSearchedProducts: Response;

    if (query.category && query.subcategory) {
        resSearchedProducts = await fetch(
        `http://localhost:5001/products?category_like=${query.category}&q=${query.subcategory}`
        );
    } else if (query.category) {
        resSearchedProducts = await fetch(
        `http://localhost:5001/products?category_like=${query.category}`
        );
    // } 
    // else if (query.subcategory) {
    //     resSearchedProducts = await fetch(
    //     `http://localhost:5001/products?subcategory_like=${query.subcategory}?_page=${page}`
    //     );

    } else if (query.subcategory) {
        resSearchedProducts = await fetch(
        `http://localhost:5001/products?q=${query.subcategory}`
        );
    }  else {
        resSearchedProducts = await fetch(`http://localhost:5001/products?_page=${page}`);
    }

    const searchedProductsData: ProductType[] = await resSearchedProducts.json();

return { 
    props: { 
        products, 
        page,
        searchedProductsData
    },
    }
 }